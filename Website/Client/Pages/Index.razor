@using LCPFavThingsWebsite.Shared.Models
@using Newtonsoft.Json
@using bc = BCrypt.Net.BCrypt

@inject HttpClient httpcl
@inject NavigationManager navman

@page "/"
@page "/home"

<PageTitle>Index</PageTitle>

<div class="container-fluid p-0 ms-auto me-auto">
    <div class="row p-0 ms-auto me-auto">
        <div class="col-12 col-md-6 order-2 order-sm-2 order-md-1 order-lg-1 order-xl-1 order-xxl-1 p-0">
            <img src="images/mimg.jpg" class="img-fluid imgmain" alt="Main image" style="object-position: center; object-fit: cover;" />
        </div>
        <div class="col-12 col-md-6 order-1 order-sm-1 order-md-2 order-lg-2 order-xl-2 order-xxl-2 pt-0 pb-0 ps-3 pe-3">
            <div class="d-flex flex-column justify-content-center align-items-stretch ms-auto me-auto text-center min-vh-100">
                <h1>Welcome!</h1>

                <EditForm Model="userauth" OnValidSubmit="Submit" class="frmlog mt-3 w-50 ms-auto me-auto">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <fieldset disabled="@isUserSubmitedForm">
                        <div class="form-group">
                            <label for="username">Username</label>
                            <input type="text" class="form-control username" id="username" placeholder="Write your username here" @bind-value="userauth.Username" autocomplete="username" />
                        </div>

                        <div class="form-group mt-3">
                            <label for="password">Password</label>
                            <input type="password" class="form-control password" id="password" placeholder="Write your password here" @bind-value="userauth.Password" autocomplete="password" />
                        </div>

                        <div class="form-group mt-3 ms-auto me-auto text-center">
                            <input type="submit" class="btn btn-primary" value="Login" />
                            <input type="button" class="btn btn-secondary" value="Reset" @onclick="Reset" />
                        </div>
                    </fieldset>
                    
                </EditForm>
            </div>
        </div>
        <div class="clearfix"></div>
    </div>
</div>

@code {
    #nullable disable

    [Inject] IJSRuntime js { get; set; } = null!;

    public UserAuth userauth { get; set; } = new UserAuth();
    private Users userslist = new Users();
    private bool isUserSubmitedForm = false;

    //protected override async Task OnInitializedAsync()
    //{
    //    StateHasChanged();
    //}

    //private async Task<bool> VerifyIfLog(string password, string hpassword) {
    //    return await Task.FromResult(bc.Verify(password, hpassword));
    //}

    private async Task<Users> GetUsersList()
    {
        return (await httpcl.GetFromJsonAsync<List<Users>>("api/users")).ToList().Where(x => x.Username == userauth.Username).FirstOrDefault();
    }

    private async Task<string> GetCurPasswordDB()
    {
        return (await GetUsersList()).PasswordT;
    }

    private void Reset() {
        userauth.Username = "";
        userauth.Password = "";
        //userauth = new UserAuth();
    }

    private async Task Submit() {
        try {
            isUserSubmitedForm = true;
            userslist = await GetUsersList();

            if (string.IsNullOrEmpty(userauth.Username))
            {
                isUserSubmitedForm = false;
                userauth = new UserAuth();
                await js.InvokeVoidAsync("alert", "Please write username field in login form!");
                return;
            }

            if (string.IsNullOrEmpty(userauth.Password))
            {
                isUserSubmitedForm = false;
                userauth = new UserAuth();
                await js.InvokeVoidAsync("alert", "Please write password field in login form!");
                return;
            }

            if (userslist != null)
            {
                UserAuth myobj = new UserAuth()
                {
                    UserAuthId = userslist.UserId,
                    Username = userauth.Username,
                    Password = null,
                    Avatar = userslist.Avatar,
                    RoleT = userslist.RoleT,
                    UserId = userslist.UserId,
                    TokenInfo = userslist.TokenInfo
                };

                if (bc.Verify(userauth.Password, await GetCurPasswordDB()))
                {
                    await js.InvokeVoidAsync("localStorage.setItem", "authlog", JsonConvert.SerializeObject(myobj));

                    if(!string.IsNullOrEmpty(await js.InvokeAsync<string>("localStorage.getItem", "authlog"))) {
                        await js.InvokeVoidAsync("alert", "Logged in!");
                    }
                }
                else
                {
                    isUserSubmitedForm = false;
                    userauth = new UserAuth();
                    await js.InvokeVoidAsync("alert", "Account not found or account details are invalid!");
                }

                StateHasChanged();
                navman.NavigateTo("/", true);
            } 
            else 
            {
                isUserSubmitedForm = false;
                userauth = new UserAuth();
                await js.InvokeVoidAsync("alert", "Account not found or account details are invalid!");
            }
        } catch (Exception e) {
            isUserSubmitedForm = false;
            await js.InvokeVoidAsync("alert", JsonConvert.SerializeObject(e.Message, Formatting.Indented));
        }
    }
}
