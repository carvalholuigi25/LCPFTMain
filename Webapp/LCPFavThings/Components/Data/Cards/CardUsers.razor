@inject NavigationManager navman

@if (mydata.Count() == 0)
{
	<p>No users data!</p>
}
else
{
	<div class="row">
		@if(mydataid != null)
		{
			@foreach (var mdata in mydata)
			{
				@if(mdata.UserId == mydataid)
				{
					<div class="col-12 col-md-12">
						<div class="card carddet">
							<div class="cardcol1">
								<div class="card-img-container">
									<img src="@imgpth/@mdata.Cover" class="card-img-top cover mt-3" alt="@mdata.Username" title="@mdata.Username" loading="lazy" />
								</div>
							</div>
							<div class="cardcol2">
								<div class="card-body">
									<h3 class="mt-3">@mdata.FirstName @mdata.LastName</h3>

                                    <p class="mt-3"><DisplayName For="@(() => mdata.UserId)" IsLabel="false" />: @mdata.UserId</p>
                                    <p class="mt-3"><DisplayName For="@(() => mdata.Username)" IsLabel="false" />: @mdata.Username</p>
                                    <p class="mt-3"><DisplayName For="@(() => mdata.Email)" IsLabel="false" />: @mdata.Email</p>
                                    <p class="mt-3"><DisplayName For="@(() => mdata.FirstName)" IsLabel="false" />: @mdata.FirstName</p>
                                    <p class="mt-3"><DisplayName For="@(() => mdata.LastName)" IsLabel="false" />: @mdata.LastName</p>
                                    <p class="mt-3"><DisplayName For="@(() => mdata.RoleT)" IsLabel="false" />: @mdata.RoleT</p>
                                    <p class="mt-3"><DisplayName For="@(() => mdata.DateBirthday)" IsLabel="false" />: @mdata.DateBirthday</p>

									<p class="mt-3"><DisplayName For="@(() => mdata.About)" IsLabel="false" />: </p>
									<div class="card card-body mt-3">@mdata.About</div>

									<button class="btn btn-primary mt-3 ms-auto me-auto d-block" @onclick="Back">Back</button>
								</div>
							</div>
						</div>
					</div>
				}
			}
		} 
		else
		{
			@foreach (var mdata in mydata)
			{
				<div class="col-12 col-md-4 mt-3 mb-3">
					<div class="card">
						<div class="card-img-container">
							<img src="@imgpth/@mdata.Cover" class="card-img-top" alt="@mdata.Username" title="@mdata.Username" loading="lazy" />
						</div>
						<div class="card-body">
							<h3>@mdata.FirstName @mdata.LastName</h3>

                            <div class="@(isUserLoggedIn ? "d-flex mt-3" : "hidden mt-0") flex-row justify-content-between align-items-center text-center">
								<a href="/users/edit/@mdata.UserId" class="btn btn-primary" title="Edit">
									<i class="bi bi-pencil"></i>
									Edit
								</a>
								<a href="/users/delete/@mdata.UserId" class="btn btn-danger" title="Delete">
									<i class="bi bi-trash"></i>
									Delete
								</a>
							</div>

							<button class="btn btn-primary mt-3" @onclick="(() => Go(mdata.UserId))">Read more</button>
						</div>
					</div>
				</div>
			}
		}

	</div>
	<div class="clearfix"></div>
}

@code {
	[Parameter]
	public List<lib.Models.Users> mydata { get; set; }

	[Parameter]
	public int? mydataid { get; set; }

    [Parameter]
    public bool isUserLoggedIn { get; set; } = false;

	public string imgpth { get; set; } = "/images";

	protected override Task OnInitializedAsync()
	{
		return base.OnInitializedAsync();
	}

	private void Go(int? gid)
	{
		navman.NavigateTo($"/users/details/{gid}");
		StateHasChanged();
	}

	private void Back()
	{
		navman.NavigateTo("/users");
		StateHasChanged();
	}

	private int ConvertDecToInt(decimal? val)
	{
		return Convert.ToInt32(val);
	}
}
